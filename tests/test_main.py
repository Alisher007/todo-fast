# tests/test_main.py

from fastapi.testclient import TestClient
from sqlmodel import Session, SQLModel, create_engine
import pytest

from main import app, get_session, TodoItem # Import the app, get_session, and TodoItem from main

# --- Test Database Setup ---
# Use an in-memory SQLite database for tests
TEST_DATABASE_URL = "sqlite:///./test.db" # We'll use a file for debugging, but :memory: is common
# Change to "sqlite:///:memory:" for a purely in-memory DB that's ephemeral.
# For now, a file-based test.db can be useful to inspect data if tests fail.
test_engine = create_engine(TEST_DATABASE_URL, echo=True)

def create_db_and_tables_for_test():
    """Create tables for the test database."""
    SQLModel.metadata.create_all(test_engine)

def get_test_session():
    """Override the get_session dependency for tests."""
    with Session(test_engine) as session:
        yield session

# Override the app's dependency
app.dependency_overrides[get_session] = get_test_session

@pytest.fixture(name="session", autouse=True)
def session_fixture():
    """
    Fixture to create/drop tables and provide a session for each test.
    `autouse=True` means this fixture runs for every test.
    """
    create_db_and_tables_for_test() # Create tables before each test
    yield
    SQLModel.metadata.drop_all(test_engine) # Drop tables after each test to ensure clean slate

# --- REMOVE THIS OLD FIXTURE! ---
# @pytest.fixture(autouse=True)
# def clear_todos_db():
#     """Clears the in-memory todos_db before each test."""
#     # This fixture is no longer needed as we're using a real DB now
#     # todos_db.clear()
#     yield
#     # todos_db.clear()

# --- TestClient Initialization ---
client = TestClient(app)

# --- Update your tests to reflect ID behavior ---
# IMPORTANT: When creating a todo, the ID is now generated by the DB.
# Your tests should expect the ID to be present and check for its type/value.

def test_read_root():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Welcome to your FastAPI Todo App!"}

def test_create_todo():
    todo_data = {"title": "Learn FastAPI"}
    response = client.post("/todos/", json=todo_data)

    assert response.status_code == 200
    response_data = response.json()
    assert "id" in response_data
    assert isinstance(response_data["id"], int) # ID is now assigned by DB
    assert response_data["title"] == "Learn FastAPI"
    assert response_data["completed"] == False

    # Verify directly from the database, not an in-memory list
    # Use the TestClient's get_session override
    with get_test_session() as session:
        db_todos = session.query(TodoItem).all()
        assert len(db_todos) == 1
        assert db_todos[0].title == "Learn FastAPI"
        assert db_todos[0].completed == False
        assert db_todos[0].id == response_data["id"] # Check if DB ID matches response ID

def test_create_todo_invalid_data():
    invalid_todo_data = {"not_a_title": "Invalid Todo"}
    response = client.post("/todos/", json=invalid_todo_data)

    assert response.status_code == 422
    assert "detail" in response.json()
    assert response.json()["detail"][0]["loc"] == ["body", "title"]
    assert response.json()["detail"][0]["msg"] == "Field required"

def test_get_all_todos_empty():
    response = client.get("/todos/")
    assert response.status_code == 200
    assert response.json() == []

def test_get_all_todos_with_data():
    # Create todos directly through the API for integration testing
    client.post("/todos/", json={"title": "Buy milk"})
    client.post("/todos/", json={"title": "Walk the dog", "completed": True})

    response = client.get("/todos/")
    assert response.status_code == 200
    # IDs will be 1 and 2 for the first and second created items in a fresh test DB
    expected_todos = [
        {"id": 1, "title": "Buy milk", "completed": False},
        {"id": 2, "title": "Walk the dog", "completed": True}
    ]
    # We might need to sort if order is not guaranteed by the DB, but for SQLite
    # with a simple sequence, it's often insertion order.
    # A more robust check might involve comparing sets of dictionaries, or checking each item individually.
    actual_todos = response.json()
    assert len(actual_todos) == 2
    # Verify contents without relying on order too strictly, or sort them for comparison
    assert sorted(actual_todos, key=lambda x: x['id']) == sorted(expected_todos, key=lambda x: x['id'])


def test_get_single_todo():
    # Create a todo first to retrieve it
    create_response = client.post("/todos/", json={"title": "Do laundry"})
    todo_id = create_response.json()["id"] # Get the actual ID from the creation response

    response = client.get(f"/todos/{todo_id}")

    assert response.status_code == 200
    assert response.json() == {"id": todo_id, "title": "Do laundry", "completed": False}

def test_get_single_todo_not_found():
    response = client.get("/todos/999")
    assert response.status_code == 404
    assert response.json() == {"detail": "Todo not found"}

def test_update_todo():
    # 1. Create a todo first
    create_response = client.post("/todos/", json={"title": "Original Title", "completed": False})
    todo_id = create_response.json()["id"]

    # 2. Define the update data
    update_data = {"title": "Updated Title", "completed": True}

    # 3. Send a PUT request to update the todo
    response = client.put(f"/todos/{todo_id}", json=update_data)

    assert response.status_code == 200
    assert response.json() == {"id": todo_id, "title": "Updated Title", "completed": True}

    # 4. Verify the database is updated by reading it again
    verify_response = client.get(f"/todos/{todo_id}")
    assert verify_response.status_code == 200
    assert verify_response.json()["title"] == "Updated Title"
    assert verify_response.json()["completed"] == True

def test_update_todo_not_found():
    response = client.put("/todos/999", json={"title": "Non-existent"})
    assert response.status_code == 404
    assert response.json() == {"detail": "Todo not found"}

def test_delete_todo():
    # 1. Create a todo first
    create_response = client.post("/todos/", json={"title": "To be deleted"})
    todo_id = create_response.json()["id"]

    # 2. Send a DELETE request
    response = client.delete(f"/todos/{todo_id}")

    assert response.status_code == 200
    assert response.json() == {"message": "Todo deleted successfully"}

    # 3. Verify the database is empty (or the item is gone)
    # Get all todos should now be empty or not contain this ID
    all_todos_response = client.get("/todos/")
    assert len(all_todos_response.json()) == 0

    # 4. Try to get the deleted todo to confirm it's gone
    response_get = client.get(f"/todos/{todo_id}")
    assert response_get.status_code == 404

def test_delete_todo_not_found():
    response = client.delete("/todos/999")
    assert response.status_code == 404
    assert response.json() == {"detail": "Todo not found"}